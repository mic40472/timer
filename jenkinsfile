pipeline {
    agent any
    tools {
        git 'Default' // Ensure Git is available
    }

    environment {
        PROJECT_ID = 'gcp-env-dev'
        CLUSTER = 'kube-cluster'
        ZONE = 'us-central1-c'
        REGION = 'us-central1'
        REPO = 'image-repo'
        IMAGE_NAME = 'pro-1'
        ARTIFACTORY = "${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/${IMAGE_NAME}"
        NAMESPACE = 'suresh'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    extensions: [[$class: 'CleanBeforeCheckout']],
                    userRemoteConfigs: [[
                        credentialsId: 'github-pat',
                        url: 'git@github.com:mic40472/timer.git'
                    ]]
                ])
            }
        }

        stage('Setup Environment') {
            steps {
                script {
                    if (!sh(returnStatus: true, script: 'which node')) {
                        sh '''
                            curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
                            sudo apt-get install -y nodejs
                        '''
                    }
                    sh 'docker ps > /dev/null'
                }
            }
        }

        stage('Install Packages') {
            steps {
                sh 'npm install'
            }
        }

        stage('Docker Build and Push') {
            steps {
                withCredentials([file(credentialsId: 'gke-key', variable: 'GC_KEY')]) {
                    script {
                        def buildTag = "${BUILD_NUMBER}"
                        def latestTag = "latest"
                        
                        sh '''
                            gcloud auth activate-service-account --key-file=$GC_KEY
                            gcloud auth configure-docker ${REGION}-docker.pkg.dev --quiet

                            docker build -t ${ARTIFACTORY}:${buildTag} -t ${ARTIFACTORY}:${latestTag} .
                            docker push ${ARTIFACTORY}:${buildTag}
                            docker push ${ARTIFACTORY}:${latestTag}
                        '''
                    }
                }
            }
        }

        stage('Deploy to GKE') {
            steps {
                withCredentials([file(credentialsId: 'gke-key', variable: 'GC_KEY')]) {
                    script {
                        sh '''
                            gcloud auth activate-service-account --key-file=$GC_KEY
                            gcloud config set project $PROJECT_ID
                            gcloud container clusters get-credentials $CLUSTER --zone $ZONE

                            # Apply manifests (but avoid hardcoded image tag in deployment.yaml)
                            kubectl apply -f k8s/ -n $NAMESPACE

                            # Update image with unique tag to force redeploy
                            kubectl set image deployment/app-deployment -n $NAMESPACE node-app=${ARTIFACTORY}:${BUILD_NUMBER}

                            # Optional: Wait for rollout to complete
                            kubectl rollout status deployment/app-deployment -n $NAMESPACE
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean only the numbered image from local cache
            sh 'docker rmi ${ARTIFACTORY}:${BUILD_NUMBER} || true'
        }
    }
}
