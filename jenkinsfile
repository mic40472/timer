pipeline {
    agent any

    environment {
        PROJECT_ID = 'gcp-env-dev'
        CLUSTER = 'kube-cluster'
        ZONE = 'us-central1-c'
        ARTIFACTORY_IMAGE = 'us-central1-docker.pkg.dev/gcp-env-dev/image-repo/pro-1'
    }

    stages {
        stage('Clone Repo') {
            steps {
                git branch: 'main', 
                    credentialsId: 'github-pat', 
                    url: 'git@github.com:mic40472/timer.git'
            }
        }

        stage('Install Node.js 16.x') {
            steps {
                sh '''
                    curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
                    sudo apt-get install -y nodejs
                    node -v
                    npm -v
                '''
            }
        }

        stage('Install Packages') {
            steps {
                sh 'npm install'
                // Uncomment below if needed
                // sh 'npm run build'
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    docker.build("${ARTIFACTORY_IMAGE}:${BUILD_NUMBER}")
                }
            }
        }

        stage('Push to Artifact Registry') {
            steps {
                withCredentials([file(credentialsId: 'gke-key', variable: 'GC_KEY')]) {
                    sh '''
                        gcloud auth activate-service-account --key-file=$GC_KEY
                        gcloud auth configure-docker us-central1-docker.pkg.dev --quiet
                        docker push ${ARTIFACTORY_IMAGE}:${BUILD_NUMBER}
                    '''
                }
            }
        }

        stage('Deploy to GKE') {
            steps {
                withCredentials([file(credentialsId: 'gke-key', variable: 'GC_KEY')]) {
                    sh '''
                        gcloud auth activate-service-account --key-file=$GC_KEY
                        gcloud config set project $PROJECT_ID
                        gcloud container clusters get-credentials $CLUSTER --zone $ZONE

                        kubectl apply -f k8s/
                        kubectl set image deployment/app-deployment node-app=${ARTIFACTORY_IMAGE}:${BUILD_NUMBER}
                        kubectl rollout status deployment/app-deployment --timeout=300s
                    '''
                }
            }
        }
    }

    post {
        always {
            sh 'docker rmi ${ARTIFACTORY_IMAGE}:${BUILD_NUMBER} || true'
        }
        failure {
            echo 'Pipeline failed!'
        }
        success {
            echo 'Pipeline succeeded!'
        }
    }
}
